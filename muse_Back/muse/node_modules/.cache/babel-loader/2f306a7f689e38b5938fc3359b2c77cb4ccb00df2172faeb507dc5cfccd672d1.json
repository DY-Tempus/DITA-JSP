{"ast":null,"code":"import React,{useRef,useState,useEffect}from'react';import'./css/MusicPlayer.css';import Detail from'./Detail';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const MusicPlayer=()=>{const[isPlaying,setIsPlaying]=useState(false);// 재생 상태 관리\nconst[currentTime,setCurrentTime]=useState(0);// 현재 재생 시간\nconst duration=240;// 총 재생 시간 (초 단위)\nconst progressBarRef=useRef(null);// 진행바를 참조할 ref\nconst[isDragging,setIsDragging]=useState(false);// 드래그 상태 관리\nconst[isOverflowing,setIsOverflowing]=useState(false);const titleRef=useRef(null);const containerRef=useRef(null);// 텍스트가 넘치는지 확인하는 함수\nconst checkOverflow=()=>{if(titleRef.current&&containerRef.current){const titleWidth=titleRef.current.scrollWidth;const containerWidth=containerRef.current.offsetWidth;setIsOverflowing(titleWidth>containerWidth);// 제목이 컨테이너보다 긴지 확인\n}};useEffect(()=>{checkOverflow();// 초기 로드 시 실행\nwindow.addEventListener('resize',checkOverflow);// 윈도우 크기가 변경될 때마다 실행\nreturn()=>{window.removeEventListener('resize',checkOverflow);// 크기 변경 이벤트 리스너 해제\n};},[]);// 진행 바의 진행률을 계산\nconst progress=currentTime/duration*100;// 재생/정지 토글 함수\nconst togglePlayPause=()=>{setIsPlaying(!isPlaying);};// 클릭 또는 드래그 시 재생 위치 변경 함수\nconst handleProgressChange=e=>{const progressBar=progressBarRef.current;const rect=progressBar.getBoundingClientRect();const offsetX=e.clientX-rect.left;// 클릭한 x좌표 계산\nconst newProgress=offsetX/rect.width*duration;// 클릭한 위치에 따른 새 재생 시간 계산\nsetCurrentTime(newProgress);// 재생 시간을 업데이트\n};// 드래그 시작\nconst handleMouseDown=e=>{setIsDragging(true);handleProgressChange(e);// 첫 클릭 시 재생 위치 변경\n};// 드래그 중\nconst handleMouseMove=e=>{if(isDragging){handleProgressChange(e);// 마우스 이동 중에 재생 위치 업데이트\n}};// 드래그 종료\nconst handleMouseUp=()=>{if(isDragging){setIsDragging(false);}};// 마우스 업 이벤트 리스너 추가\nuseEffect(()=>{if(isDragging){window.addEventListener('mousemove',handleMouseMove);window.addEventListener('mouseup',handleMouseUp);}else{window.removeEventListener('mousemove',handleMouseMove);window.removeEventListener('mouseup',handleMouseUp);}return()=>{window.removeEventListener('mousemove',handleMouseMove);window.removeEventListener('mouseup',handleMouseUp);};},[isDragging]);const[isDetailOpen,setIsDetailOpen]=useState(false);// Detail 패널 상태 관리\nconst toggleDetail=()=>{setIsDetailOpen(!isDetailOpen);//버튼 클릭시 Detail이 나옴\n};return/*#__PURE__*/_jsxs(\"div\",{className:\"music-player-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"progress-bar-container\",ref:progressBarRef,onClick:handleProgressChange// 진행바 클릭 이벤트 추가\n,onMouseDown:handleMouseDown// 드래그 시작\n,children:/*#__PURE__*/_jsx(\"div\",{className:\"progress-bar\",style:{width:`${progress}%`}})}),/*#__PURE__*/_jsxs(\"div\",{className:\"music-player\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"controls\",children:[/*#__PURE__*/_jsx(\"img\",{src:\"/img/skip_previous.png\",alt:\"Previous\",className:\"control-button-extra\",onClick:()=>console.log('Previous clicked')}),/*#__PURE__*/_jsx(\"img\",{src:isPlaying?\"/img/pause.png\":\"/img/play.png\",alt:isPlaying?\"Pause\":\"Play\",className:\"control-button\",onClick:togglePlayPause}),/*#__PURE__*/_jsx(\"img\",{src:\"/img/skip_next.png\",alt:\"Next\",className:\"control-button-extra\",onClick:()=>console.log('Next clicked')})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"track-info\",children:[/*#__PURE__*/_jsx(\"img\",{src:\"/img/album.jpg\",alt:\"Album Art\",className:\"album-art\"}),/*#__PURE__*/_jsx(\"div\",{className:\"track-details\",ref:containerRef,children:/*#__PURE__*/_jsx(\"p\",{className:`track-title ${isOverflowing?'marquee':''}`,children:\"Collide - Hellberg & Deutgen vs Splitbreed (Astronaut & Barely Alive Remix)\"})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"controls-extra\",children:[/*#__PURE__*/_jsx(\"img\",{src:\"/img/shuffle.png\",alt:\"Shuffle\",className:\"control-button-extra\",onClick:()=>console.log('Shuffle clicked')}),/*#__PURE__*/_jsx(\"img\",{src:\"/img/repeat.png\",alt:\"Repeat\",className:\"control-button-extra\",onClick:()=>console.log('Repeat clicked')}),/*#__PURE__*/_jsx(\"img\",{src:\"/img/volume.png\",alt:\"Volume\",className:\"control-button-extra\",onClick:()=>console.log('Volume clicked')}),/*#__PURE__*/_jsx(\"img\",{src:\"/img/playlist.png\",alt:\"Playlist\",className:\"control-button-extra\",onClick:()=>console.log('Playlist clicked')}),/*#__PURE__*/_jsx(\"img\",{src:\"/img/info.png\",alt:\"Info\",className:\"control-button-extra\",onClick:toggleDetail}),/*#__PURE__*/_jsx(Detail,{isOpen:isDetailOpen,setIsOpen:setIsDetailOpen})]})]})]});};export default MusicPlayer;","map":{"version":3,"names":["React","useRef","useState","useEffect","Detail","jsx","_jsx","jsxs","_jsxs","MusicPlayer","isPlaying","setIsPlaying","currentTime","setCurrentTime","duration","progressBarRef","isDragging","setIsDragging","isOverflowing","setIsOverflowing","titleRef","containerRef","checkOverflow","current","titleWidth","scrollWidth","containerWidth","offsetWidth","window","addEventListener","removeEventListener","progress","togglePlayPause","handleProgressChange","e","progressBar","rect","getBoundingClientRect","offsetX","clientX","left","newProgress","width","handleMouseDown","handleMouseMove","handleMouseUp","isDetailOpen","setIsDetailOpen","toggleDetail","className","children","ref","onClick","onMouseDown","style","src","alt","console","log","isOpen","setIsOpen"],"sources":["C:/jsp/DITA-JSP/muse/src/components/MusicPlayer.jsx"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\r\nimport './css/MusicPlayer.css';\r\nimport Detail from './Detail'\r\n\r\nconst MusicPlayer = () => {\r\n    const [isPlaying, setIsPlaying] = useState(false); // 재생 상태 관리\r\n    const [currentTime, setCurrentTime] = useState(0); // 현재 재생 시간\r\n    const duration = 240; // 총 재생 시간 (초 단위)\r\n    const progressBarRef = useRef(null); // 진행바를 참조할 ref\r\n    const [isDragging, setIsDragging] = useState(false); // 드래그 상태 관리\r\n\r\n    const [isOverflowing, setIsOverflowing] = useState(false);\r\n    const titleRef = useRef(null);\r\n    const containerRef = useRef(null);\r\n\r\n    // 텍스트가 넘치는지 확인하는 함수\r\n    const checkOverflow = () => {\r\n        if (titleRef.current && containerRef.current) {\r\n            const titleWidth = titleRef.current.scrollWidth;\r\n            const containerWidth = containerRef.current.offsetWidth;\r\n            setIsOverflowing(titleWidth > containerWidth); // 제목이 컨테이너보다 긴지 확인\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        checkOverflow(); // 초기 로드 시 실행\r\n        window.addEventListener('resize', checkOverflow); // 윈도우 크기가 변경될 때마다 실행\r\n\r\n        return () => {\r\n            window.removeEventListener('resize', checkOverflow); // 크기 변경 이벤트 리스너 해제\r\n        };\r\n    }, []);\r\n\r\n    // 진행 바의 진행률을 계산\r\n    const progress = (currentTime / duration) * 100;\r\n\r\n    // 재생/정지 토글 함수\r\n    const togglePlayPause = () => {\r\n        setIsPlaying(!isPlaying);\r\n    };\r\n\r\n    // 클릭 또는 드래그 시 재생 위치 변경 함수\r\n    const handleProgressChange = (e) => {\r\n        const progressBar = progressBarRef.current;\r\n        const rect = progressBar.getBoundingClientRect();\r\n        const offsetX = e.clientX - rect.left; // 클릭한 x좌표 계산\r\n        const newProgress = (offsetX / rect.width) * duration; // 클릭한 위치에 따른 새 재생 시간 계산\r\n        setCurrentTime(newProgress); // 재생 시간을 업데이트\r\n    };\r\n    // 드래그 시작\r\n    const handleMouseDown = (e) => {\r\n        setIsDragging(true);\r\n        handleProgressChange(e); // 첫 클릭 시 재생 위치 변경\r\n    };\r\n\r\n    // 드래그 중\r\n    const handleMouseMove = (e) => {\r\n        if (isDragging) {\r\n            handleProgressChange(e); // 마우스 이동 중에 재생 위치 업데이트\r\n        }\r\n    };\r\n\r\n    // 드래그 종료\r\n    const handleMouseUp = () => {\r\n        if (isDragging) {\r\n            setIsDragging(false);\r\n        }\r\n    };\r\n\r\n    // 마우스 업 이벤트 리스너 추가\r\n    useEffect(() => {\r\n        if (isDragging) {\r\n            window.addEventListener('mousemove', handleMouseMove);\r\n            window.addEventListener('mouseup', handleMouseUp);\r\n        } else {\r\n            window.removeEventListener('mousemove', handleMouseMove);\r\n            window.removeEventListener('mouseup', handleMouseUp);\r\n        }\r\n\r\n        return () => {\r\n            window.removeEventListener('mousemove', handleMouseMove);\r\n            window.removeEventListener('mouseup', handleMouseUp);\r\n        };\r\n    }, [isDragging]);\r\n\r\n    const [isDetailOpen, setIsDetailOpen] = useState(false); // Detail 패널 상태 관리\r\n\r\n    const toggleDetail = () => {\r\n        setIsDetailOpen(!isDetailOpen);\r\n        //버튼 클릭시 Detail이 나옴\r\n    };\r\n\r\n    return (\r\n        <div className=\"music-player-container\">\r\n            {/* ProgressBar 통합 */}\r\n            <div \r\n                className=\"progress-bar-container\" \r\n                ref={progressBarRef}\r\n                onClick={handleProgressChange} // 진행바 클릭 이벤트 추가\r\n                onMouseDown={handleMouseDown} // 드래그 시작\r\n            >\r\n                <div className=\"progress-bar\" style={{ width: `${progress}%` }}></div>\r\n            </div>\r\n\r\n            <div className=\"music-player\">\r\n                <div className=\"controls\">\r\n                    <img src=\"/img/skip_previous.png\" alt=\"Previous\" className=\"control-button-extra\" onClick={() => console.log('Previous clicked')} />\r\n                    <img \r\n                        src={isPlaying ? \"/img/pause.png\" : \"/img/play.png\"} \r\n                        alt={isPlaying ? \"Pause\" : \"Play\"} \r\n                        className=\"control-button\" \r\n                        onClick={togglePlayPause} \r\n                    />\r\n                    <img src=\"/img/skip_next.png\" alt=\"Next\" className=\"control-button-extra\" onClick={() => console.log('Next clicked')} />\r\n                </div>\r\n                <div className=\"track-info\">\r\n                    <img src=\"/img/album.jpg\" alt=\"Album Art\" className=\"album-art\" />\r\n                    <div className=\"track-details\" ref={containerRef}>\r\n                        <p className={`track-title ${isOverflowing ? 'marquee' : ''}`}>Collide - Hellberg & Deutgen vs Splitbreed (Astronaut & Barely Alive Remix)</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"controls-extra\">\r\n                    <img src=\"/img/shuffle.png\" alt=\"Shuffle\" className=\"control-button-extra\" onClick={() => console.log('Shuffle clicked')} />\r\n                    <img src=\"/img/repeat.png\" alt=\"Repeat\" className=\"control-button-extra\" onClick={() => console.log('Repeat clicked')} />\r\n                    <img src=\"/img/volume.png\" alt=\"Volume\" className=\"control-button-extra\" onClick={() => console.log('Volume clicked')} />\r\n                    <img src=\"/img/playlist.png\" alt=\"Playlist\" className=\"control-button-extra\" onClick={() => console.log('Playlist clicked')} />\r\n                    <img src=\"/img/info.png\" alt=\"Info\" className=\"control-button-extra\" onClick={toggleDetail} />\r\n                    {/* Detail 컴포넌트 */}\r\n                    <Detail isOpen={isDetailOpen} setIsOpen={setIsDetailOpen} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MusicPlayer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}